#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""Walk the FST generated by `sent2fst.py` for all possible
   "expansions"
"""
from __future__ import unicode_literals, division, print_function #Py2

__author__ = "Daniel van Niekerk"
__email__ = "dvn.demitasse@gmail.com"

import pywrapfst as wfst

def dfs_walk(fst, itos, state, labels, path, fullpaths, maxpaths=1000):
    #print(len(fullpaths), state, file=sys.stderr)
    path = path[:]
    if labels:
        path.append(labels)
    if fst.final(state) != wfst.Weight.Zero(fst.weight_type()): #state is final?
        fullpaths.append(path)
        if len(fullpaths) == maxpaths:
            return
    #print(state, len(list(fst.arcs(state))), file=sys.stderr)
    for arc in fst.arcs(state):
        labs = (itos[arc.ilabel], itos[arc.olabel])
        dfs_walk(fst, itos, arc.nextstate, labs, path, fullpaths)

##############################
if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(description=__doc__, formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--max', metavar='MAX', type=int, default=None, help="maximum number of exapnsions (picked at random)")
    parser.add_argument('--nospecial', action="store_true", help="prefer output without 'special words' such as spelled letters")
    args = parser.parse_args()

    fst = wfst.Fst.read(b"")
    itos = dict(fst.output_symbols())

    paths = []
    dfs_walk(fst, itos, fst.start(), None, [], paths)
    strings = set()
    for p in paths:
        strings.add(" ".join([e[0].split("<")[0] for e in p]))

    ss = list(strings)
    if args.nospecial:
        ss = [s for s in strings if all(["_" not in w for w in s])]
        if not ss:
            ss = list(strings)

    if args.max is not None and args.max > 0:
        import random
        random.shuffle(ss)
        ss = ss[:args.max]
            
    for s in sorted(ss):
        print(s)
